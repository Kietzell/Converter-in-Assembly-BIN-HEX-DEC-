TITLE Reversing a String          (RevStr.asm)

; This program reverses a string.

INCLUDE Irvine32.inc

.data
aName BYTE "Abraham Lincoln",0
nameSize = ($ - aName) - 1

.code
main PROC

; Push the name on the stack.

	mov	ecx,nameSize
	mov	esi,0

L1:	movzx eax,aName[esi]	; get character
	push	eax				; push on stack
	inc	esi
	loop L1

; Pop the name from the stack, in reverse,
; and store in the aName array.

	mov	ecx,nameSize
	mov	esi,0

L2:	pop eax				; get character
	mov	aName[esi],al		; store in string
	inc	esi
	loop L2

; Display the name.

	mov  edx,OFFSET aName
	call Writestring
	call Crlf

	exit
main ENDP
END main
TITLE Displaying Binary Bits                (WriteBin.asm)

; This program displays a 32-bit integer in binary.

INCLUDE Irvine32.inc

.data
binValue DWORD 1234ABCDh		; sample binary value
buffer BYTE 32 dup(0),0

.code
main PROC

	mov	eax,binValue		; number to display
	mov	ecx,32			; number of bits in EAX
	mov	esi,offset buffer

L1:	shl	eax,1			; shift high bit into Carry flag
	mov	BYTE PTR [esi],'0'	; choose 0 as default digit
	jnc	L2				; if no Carry, jump to L2
	mov	BYTE PTR [esi],'1'	; else move 1 to buffer

L2:	inc  esi				; next buffer position
	loop L1				; shift another bit to left

	mov  edx,OFFSET buffer	; display the buffer
	call WriteString
	call Crlf
	exit
main ENDP
END main

TITLE String Library Demo	(StringDemo.asm)

; This program demonstrates the string-handling procedures in 
; the book's link library.

INCLUDE Irvine32.inc

.data
string_1 BYTE "abcde////",0
string_2 BYTE "ABCDE",0
msg0     BYTE "string_1 in upper case: ",0
msg1     BYTE "string1 and string2 are equal",0
msg2     BYTE "string_1 is less than string_2",0
msg3     BYTE "string_2 is less than string_1",0
msg4     BYTE "Length of string_2 is ",0
msg5     BYTE "string_1 after trimming: ",0

.code
main PROC

	call	trim_string
	call	upper_case
	call	compare_strings
	call	print_length

	exit
main ENDP

trim_string PROC
; Remove trailing characters from string_1.

	INVOKE Str_trim, ADDR string_1,'/'
	mov	edx,OFFSET msg5
	call	WriteString
	mov	edx,OFFSET string_1
	call	WriteString
	call	Crlf

	ret
trim_string ENDP

upper_case PROC
; Convert string_1 to upper case.

	mov	edx,OFFSET msg0
	call	WriteString
	INVOKE Str_ucase, ADDR string_1
	mov	edx,OFFSET string_1
	call	WriteString
	call	Crlf

	ret
upper_case ENDP

compare_strings PROC
; Compare string_1 to string_2.

	INVOKE Str_compare, ADDR string_1, ADDR string_2
	.IF ZERO?
	mov	edx,OFFSET msg1
	.ELSEIF CARRY?
	mov	edx,OFFSET msg2     ; string 1 is less than...
	.ELSE
	mov	edx,OFFSET msg3     ; string 2 is less than...
	.ENDIF
	call	WriteString
	call	Crlf

	ret
compare_strings  ENDP

print_length PROC
; Display the length of string_2.

	mov	edx,OFFSET msg4
	call	WriteString
	INVOKE Str_length, ADDR string_2
	call	WriteDec
	call	Crlf

	ret
print_length ENDP

END main

TITLE Copying a String                  (CopyStr.asm)

; This program copies a string.

INCLUDE Irvine32.inc

.data
source  BYTE  "This is the source string",0
target  BYTE  SIZEOF source DUP(0),0

.code
main PROC

	mov  esi,0			; index register
	mov  ecx,SIZEOF source	; loop counter
L1:
	mov  al,source[esi]		; get a character from source
	mov  target[esi],al		; store it in the target
	inc  esi				; move to next character
	loop L1				; repeat for entire string

	exit
main ENDP
END main









DivideString PROC
	mov ecx, SIZEOF buffer
	mov esi,0
D1:
	mov al,First[esi]
	mov buffer[esi], al
	inc esi
	loop D1

ret
DivideString ENDP

